geom_smooth( mapping = aes( x = displ, y = hwy ))
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = displ < 6 ), size = 3) +
geom_smooth( mapping = aes( x = displ, y = hwy ))
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = f1 ), size = 3) +
geom_smooth( mapping = aes( x = displ, y = hwy ))
# ploting displ[engine size] vs hwy[ fuel efficiency]
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = fl ), size = 3) +
geom_smooth( mapping = aes( x = displ, y = hwy ))
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = drv ), size = 3) +
geom_smooth( mapping = aes( x = displ, y = hwy ))
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color =  ), size = 3) +
facet_wrap( ~ class, nrow = 2 )
geom_smooth( mapping = aes( x = displ, y = hwy ))
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = className() ), size = 3) +
facet_wrap( ~ class, nrow = 2 )
geom_smooth( mapping = aes( x = displ, y = hwy ))
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = className() ), size = 3) +
facet_wrap( ~ class, nrow = 2 )
geom_smooth( mapping = aes( x = displ, y = hwy ))
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = class ), size = 3) +
facet_wrap( ~ class, nrow = 2 )
geom_smooth( mapping = aes( x = displ, y = hwy ))
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = class ), size = 2) +
facet_wrap( ~ class, nrow = 2 )
geom_smooth( mapping = aes( x = displ, y = hwy ))
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = class ), size = 2) +
facet_wrap( ~ class, nrow = 3 )
geom_smooth( mapping = aes( x = displ, y = hwy ))
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = class ), size = 2) +
facet_wrap( ~ class, nrow = 4 )
geom_smooth( mapping = aes( x = displ, y = hwy ))
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = class ), size = 2) +
facet_wrap( ~ class, nrow = 2 )
geom_smooth( mapping = aes( x = displ, y = hwy ))
ggplot( data = mpg) +
geom_point( mapping = aes( y = displ, x = hwy,color = class ), size = 2) +
facet_wrap( ~ class, nrow = 2 )
geom_smooth( mapping = aes( x = displ, y = hwy ))
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = class ), size = 2) +
facet_wrap( ~ class, nrow = 2 )
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = class ), size = 2) +
facet_grid( ~ class, nrow = 2 )
geom_smooth( mapping = aes( x = displ, y = hwy ))
ggplot( data = mpg) +
geom_point( mapping = aes( x = drv, y = cyl,color = class ), size = 2) +
ggplot( data = mpg) +
geom_point( mapping = aes( x = drv, y = cyl,color = class ), size = 2)
ggplot( data = mpg) +
geom_point( mapping = aes( x = drv, y = cyl,color = class ), size = 2)
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = class ), size = 2) +
facet_grid( ~ class, nrow = 2, margin = TRUE )
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = class ), size = 2) +
facet_grid( ~ class, margin = TRUE )
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = class ), size = 2) +
facet_grid( ~ class, margin = "am" )
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = class ), size = 2) +
facet_grid( ~ class, margin = "vs" )
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = class ), size = 2) +
facet_grid( ~ class, nrow = 2, margin = "am" )
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = class ), size = 2) +
geom_smooth( mapping = aes( x = displ, y = hwy ), se = FALSE)
library(tidyverse)
ggplot( data = diamonds) +
stats_summary(
mapping = aes( x=cut, y=depth ),
fun.ymin = min,
fun.ymax = max,
fun.y = median
)
ggplot( data = diamonds) +
stat_summary(
mapping = aes( x=cut, y=depth ),
fun.ymin = min,
fun.ymax = max,
fun.y = median
)
ggplot( data = diamonds, color = "blue4") +
stat_summary(
mapping = aes( x=cut, y=depth ),
fun.ymin = min,
fun.ymax = max,
fun.y = median
)
library(tidyverse)
ggplot( data = diamonds, color = "blue4") +
geom_col( mapping = aes( x=cut, y=depth)
q
ggplot( data = diamonds, color = "blue4") +
geom_col( mapping = aes( x=cut, y=depth)
)
ggplot( data = diamonds, color = "blue4") +
geom_bar( mapping = aes( x=cut, y=depth)
q
ggplot( data = diamonds, color = "blue4") +
geom_bar( mapping = aes( x=cut, y=depth))
ggplot( data = diamonds, color = "blue4") +
geom_bar( mapping = aes( x=cut, y=depth), stat = "identity")
ggplot( data = diamonds, color = "blue4") +
geom_bar( mapping = aes( x=cut, color = cut))
ggplot( data = diamonds, color = "blue4") +
geom_bar( mapping = aes( x=cut, fill = cut))
ggplot( data = diamonds, color = "blue4") +
geom_bar( mapping = aes( x=cut, fill = clarity))
ggplot( data = diamonds,mapping = aes( x=cut, fill = clarity)) +
geom_bar( alpha = 1/5, position = "identity")
ggplot( data = diamonds,mapping = aes( x=cut, fill = NA)) +
geom_bar( alpha = 1/5, position = "identity")
ggplot( data = diamonds,mapping = aes( x=cut, color = "clarity")) +
geom_bar( fill = NA, position = "identity")
ggplot( data = diamonds,mapping = aes( x=cut, color = "clarity")) +
geom_bar( position = "identity")
ggplot( data = diamonds,mapping = aes( x=cut, color = "clarity")) +
geom_bar( position = "fill")
ggplot( data = diamonds,mapping = aes( x=cut, color = "clarity")) +
geom_bar( position = "dodge")
ggplot( data = diamonds, mapping = aes( x=cut, fill = clarity )) +
geom_bar( position = "dodge")
library(tidyverse)
# Importing dataset
View(nycflights13)
ggplot( data = diamonds ) +
geom_bin2d( mapping = aes( x = carat, y= price ))
ggplot( data = diamonds ) +
geom_bin2d( mapping = aes( x = carat, y= price ))
vignette("tibble")
tibble( ~x,~y,~z
#________
'a',2,2
'b',3,3
)
tibble( ~x,~y,~z
#________
'a',2,2
'b',3,3?)
tibble( ~x,~y,~z
#________
'a',2,2
'b',3,3)
tibble( ~x,~y,~z
#________
'a',2,2
'b',3,3)
tibble( ~x,~y,~z,
#________
'a',2,2,
'b',3,3)
tibble( ~x,~y,~z,
#________
'a',2,2,
'b',3,3
)
tibble( ~x,~y,~z,
#________
'a',2,2,
'b',3,3
)
tribble( ~x,~y,~z,
#________
'a',2,2,
'b',3,3
)
tribble( ~x,~y,~z,
#________
'a',2,2,
'b',3,3
)
tribble( ~x,~y,~z,
#________
'a',1:10,2,
'b',3,3
)
tribble( ~x,~y,~z,
#________
'a',1:10,2,
'b',3,3
)
load("C:/Users/RISHABH/Desktop/BIG MArt/.RData")
install.packages(c("backports", "callr", "class", "htmlTable", "httpuv", "httr", "jsonlite", "knitr", "markdown", "pillar", "ps", "quantreg", "readr", "readxl", "slam", "tibble", "tm"))
install.packages(c("class", "codetools"), lib="C:/Program Files/R/R-3.5.1/library")
install.packages(c("backports", "callr", "class", "htmlTable", "httpuv", "httr", "jsonlite", "knitr", "markdown", "pillar", "ps", "quantreg", "readr", "readxl", "slam", "tibble", "tm"))
install.packages(c("backports", "callr", "class", "htmlTable", "httpuv", "httr", "jsonlite", "knitr", "markdown", "pillar", "ps", "quantreg", "readr", "readxl", "slam", "tibble", "tm"))
install.packages(c("backports", "callr", "class", "htmlTable", "httpuv", "httr", "jsonlite", "knitr", "markdown", "pillar", "ps", "quantreg", "readr", "readxl", "slam", "tibble", "tm"))
install.packages(c("backports", "callr", "class", "htmlTable", "httpuv", "httr", "jsonlite", "knitr", "markdown", "pillar", "ps", "quantreg", "readr", "readxl", "slam", "tibble", "tm"))
install.packages("parallelMap")
1+1+1+1+1+
3
sum(4+4+4+4+6)
sum(1,1,1,1)
prod(1,2,3)
apple = 89
is.integer(2)
is.integer(2L)
knitr::opts_chunk$set(echo = FALSE)
summary(cars)
plot(pressure)
e
Inf
data <- list(x = 1:5, y = 6:10, z = 11:15)
lapply(data, FUN = median)
data$x
movies <- c("SPYDERMAN","BATMAN","VERTIGO","CHINATOWN")
movies_lower <-lapply(movies, tolower)
movies_lower
mapply(rep, 1:4, 4:1)
mapply(sum, 1:5,1:5)
mapply(sum, 1:5,1:6)
mapply(sum, 1:5, 1:10,1:20)
mapply(rep, times = 1:4, x = 4:1)
mapply(sum, 1:5, 1:10)
mapply(sum, 1:5, 1:15)
mapply(sum, times = 1:5, x = 1:15)
#include <stdio.h>
int main()
{
int a[] = { 1, 2, 3, 4,5,6,7,8,9,10,11,12, 13};
int i,sum,temp,MAX =0,n=12;
while(n>0)
{
sum =0;
temp = a[0];
// Rotation
for(int j=0; j<12;j++)
{
a[j]=a[j+1];
}
a[12] = temp;
// Calculating Sum
for(i=0;i<13;i++)
{
sum = sum+ i*a[i];
}
printf("%d \n",sum);
// Geting MAX
if(MAX < sum)
{
MAX =sum;
}
n--;
}
printf("MAn IS : %d",MAX);
}
setwd("~/GitHub/Mini/Flight Price Prediction")
load("~/GitHub/Mini/Flight Price Prediction/.RData")
View(Train)
library(tidyverse)
a1 <- ggplot( Train ,aes(fct_infreq(Train$Airline))) + geom_bar(, fill ='red4') + coord_flip()
a2 <- ggplot( Train ,aes(fct_infreq(Train$Source))) + geom_bar(, fill ='blue4') + coord_flip()
a3 <- ggplot( Train ,aes(fct_infreq(Train$Destination))) + geom_bar(, fill ='orange4') + coord_flip()
a4 <- ggplot( Train ,aes(fct_infreq(Train$Total_Stops))) + geom_bar(, fill ='deeppink4') + coord_flip()
grid.arrange( a1,a2,a3,a4, nrow = 2)
library(tidyverse)
library(ggcorrplot)
library(gridExtra)
library(randomForest)
library(caret)
library(mlr)
a1 <- ggplot( Train ,aes(fct_infreq(Train$Airline))) + geom_bar(, fill ='red4') + coord_flip()
a2 <- ggplot( Train ,aes(fct_infreq(Train$Source))) + geom_bar(, fill ='blue4') + coord_flip()
a3 <- ggplot( Train ,aes(fct_infreq(Train$Destination))) + geom_bar(, fill ='orange4') + coord_flip()
a4 <- ggplot( Train ,aes(fct_infreq(Train$Total_Stops))) + geom_bar(, fill ='deeppink4') + coord_flip()
grid.arrange( a1,a2,a3,a4, nrow = 2)
# Spread analysis of Dependent Variable
ggplot( Train, aes(log(Train$Price))) +  geom_area(stat = 'bin', fill ='violetred4')
ggplot( Train, aes(Train$Price), binwidth = 2) +
geom_histogram()
# Skewness and Kurtosis
library(moments)
skewness(Train$Price)
kurtosis(Train$Price)
b1 <- ggplot( Train, aes(x = Airline, y= Price, fill = Airline))
b12 <- b1 + geom_boxplot()+coord_flip();b12
b2 <- ggplot( Train, aes(x = Source, y= Price, fill = Source))
b22 <- b1 + geom_boxplot()+coord_flip();b12
b21<-  geom_bar( stat = "summary", fun.y = 'mean') + coord_flip();b2
b21<-  geom_bar( stat = "summary", fun.y = 'mean') + coord_flip();b21
b3 <- ggplot( Train, aes(x = Destination, y= Price, fill = Destination)) +
geom_boxplot()+coord_flip();b2
b3 <- ggplot( Train, aes(x = Destination, y= Price, fill = Destination)) +
geom_boxplot()+coord_flip();b3
b8 <- ggplot( Train, aes(x =Train$Duration_min , y= Price)) + geom_point(color="red4");b8
b8 <- ggplot( Train, aes(x =Train$Duration_min , y= Price)) +
geom_point(color="red4") +
geom_smooth(model = lm);b8
b8 <- ggplot( Train, aes(x =Train$Duration_min , y= Price)) +
geom_point(color="red4") +
geom_smooth();b8
b8 <- ggplot( Train, aes(x =Duration_min , y= Price)) +
geom_point(color="red4") +
geom_smooth();b8
Train <- read_excel("Data_Train.xlsx")
Test <- read_excel("Test_set.xlsx")
All <- rbind(Train,Test)
View(Train)
View(Test)
Test$Price <- NA
All <- rbind(Train,Test)
View(All)
library(readxl)
Train <- read_excel("Data_Train.xlsx")
Test <- read_excel("Test_set.xlsx")
Test$Price <- NA
All <- rbind(Train,Test)
View(All)
str(All)
summary(All)
sum(is.na(All))
All <- All[ , !(colnames(All)) %in% c('Route','Additional_Info')]
All$Airline = as_factor(All$Airline)
All$Source = as_factor(All$Source)
All$Destination = as_factor(All$Destination)
All$Total_Stops = as_factor(All$Total_Stops)
str(All)
All$Date_of_Journey = as.Date(All$Date_of_Journey, "%d/%m/%Y")
## Extracting Day of Week
All = All %>% mutate(day_week = lubridate::wday(All$Date_of_Journey, label = TRUE))
str(All)
## Converting string into date format
All$Dep_Time <- strptime(All$Dep_Time, format = '%H:%M')
## Extracting hour from date
All$Dep_Time_hour = as.factor((lubridate::hour(All$Dep_Time)))
str(All)
All$Arrival_Time = str_sub(All$Arrival_Time,1,5)
## Converting string into date format
All$Arrival_Time <- strptime(All$Arrival_Time, format = '%H:%M')
## Extracting hour from date
All$Arrival_Time_hour = as.factor((lubridate::hour(All$Arrival_Time)))
str(All)
All <- All %>% mutate(Duration_min = abs(as.numeric(Dep_Time - Arrival_Time))/60)
## Dropping column Date_of_Journey
All <- All[ , !(colnames(All)) %in% c('Date_of_Journey')]
## Dropping column Dep_Time
All <- All[ , !(colnames(All)) %in% c('Dep_Time')]
## Dropping column Arrival_Time
All <- All[ , !(colnames(All)) %in% c('Arrival_Time')]
## Dropping column Duration
All <- All[ , !(colnames(All)) %in% c('Duration')]
str(All)
a1 <- ggplot( All ,aes(fct_infreq(All$Airline))) + geom_bar(, fill ='red4') + coord_flip()
a2 <- ggplot( All ,aes(fct_infreq(All$Source))) + geom_bar(, fill ='blue4') + coord_flip()
a3 <- ggplot( All ,aes(fct_infreq(All$Destination))) + geom_bar(, fill ='orange4') + coord_flip()
a4 <- ggplot( All ,aes(fct_infreq(All$Total_Stops))) + geom_bar(, fill ='deeppink4') + coord_flip()
grid.arrange( a1,a2,a3,a4, nrow = 2)
a5 <- ggplot( All ,aes(fct_infreq(All$day_week))) + geom_bar(, fill ='coral3') + coord_flip();a5
a6 <- ggplot( All ,aes(fct_infreq(All$Dep_Time_hour))) + geom_bar(, fill ='magenta3') + coord_flip()
a7 <- ggplot( All ,aes(fct_infreq(All$Arrival_Time_hour))) + geom_bar(, fill ='royalblue1') + coord_flip()
grid.arrange(a6,a7, nrow = 1)
ggplot( All, aes(log(All$Price))) +  geom_area(stat = 'bin', fill ='violetred4')
ggplot( All, aes(All$Price), binwidth = 2) + geom_histogram()
ggplot( All, aes(All$Price,color = green4), binwidth = 2) + geom_histogram()
ggplot( All, aes(All$Price,color = "green4"), binwidth = 2) + geom_histogram()
ggplot( All, aes(All$Price,fill = "green4"), binwidth = 2) + geom_histogram()
ggplot( All, aes(All$Price,fill = "blue4"), binwidth = 2) + geom_histogram()
ggplot( All, aes(All$Price), binwidth = 2) + geom_histogram(fill = "blue4")
ggplot( All, aes(log(All$Price))) +  geom_area(stat = 'bin', fill ='violetred4')
ggplot( All, aes((All$Price))) +  geom_area(stat = 'bin', fill ='violetred4')
ggplot( All, aes(All$Price), binwidth = 2) + geom_histogram(fill = "blue4")
ggplot( data = All[!is.na(All$Price)], aes(All$Price), binwidth = 2) + geom_histogram(fill = "blue4")
ggplot( data = All[!is.na(All$Price)], aes(All$Price), binwidth = 2) + geom_histogram(fill = "blue4")
ggplot( data = All[!is.na(All$Price),], aes(x=All$Price), binwidth = 2) + geom_histogram(fill = "blue4")
ggplot( data = All, aes(x=All$Price), binwidth = 2) + geom_histogram(fill = "blue4")
ggplot( data = All, aes(x=All$Price), binwidth = 5) + geom_histogram(fill = "blue4")
ggplot( data = All, aes(x=All$Price)) +
geom_histogram(fill = "blue4", binwidth = 5)
ggplot( data = All, aes(x=All$Price)) +
geom_histogram(fill = "blue4", binwidth = 30)
ggplot( data = All, aes(x=All$Price)) +
geom_histogram(fill = "blue4", binwidth = 1000)
ggplot( data = All, aes(x=All$Price)) +
geom_histogram(fill = "blue4", binwidth = 2000)
ggplot( data = All, aes(x=All$Price)) +
geom_histogram(fill = "blue4", binwidth = 2000)+
scale_x_continuous(breaks = seq(0,30000, by =1000))
ggplot( data = All, aes(x=All$Price)) +
geom_histogram(fill = "blue4", binwidth = 2000)+
scale_x_continuous(breaks = seq(0,80000, by =2000))
ggplot( data = All, aes(x=All$Price)) +
geom_histogram(fill = "blue4", binwidth = 2000)+
scale_x_continuous(breaks = seq(0,80000, by =4000))
ggplot( data = All, aes(x=All$Price)) +
geom_histogram(fill = "blue4", binwidth = 2000)+
scale_x_continuous(breaks = seq(0,80000, by =4000),labels = comma)
library(moments)
skewness(All$Price)
kurtosis(All$Price)
skewness(All[!is.na(All$Price),])
!is.na(All$Price)
All[!is.na(All$Price),]
skewness(All$Price[!is.na(All$Price),])
skewness(All$Price,na.rm = T)
skewness(All$Price,na.rm = TRUE)
kurtosis(All$Price, na.rm = TRUE)
b1 <- ggplot( All, aes(x = Airline, y= Price, fill = Airline))
+ geom_boxplot()+coord_flip();b1
b1 <- ggplot( All, aes(x = Airline, y= Price, fill = Airline)) +
geom_boxplot()+coord_flip();b1
ggplot( data = All, aes(x=All$Price)) +
geom_histogram(fill = "blue4", binwidth = 2000)+
scale_x_continuous(breaks = seq(0,80000, by =4000))
ggplot( data = All, aes(x=All$Price)) +
geom_histogram(fill = "blue4", binwidth = 2000)+
xlim(0,24000) +
scale_x_continuous(breaks = seq(0,80000, by =4000))
ggplot( data = All, aes(x=subset(All$Price < 24000))) +
geom_histogram(fill = "blue4", binwidth = 2000)+
scale_x_continuous(breaks = seq(0,80000, by =4000))
small <- subset(All, Price < 24000)
ggplot( data = small, aes(x=Price)) +
geom_histogram(fill = "blue4", binwidth = 2000)+
scale_x_continuous(breaks = seq(0,80000, by =4000))
small <- subset(All, Price < 40000)
ggplot( data = small, aes(x=Price)) +
geom_histogram(fill = "blue4", binwidth = 2000)+
scale_x_continuous(breaks = seq(0,80000, by =4000))
small <- subset(All, Price < 20000)
ggplot( data = small, aes(x=Price)) +
geom_histogram(fill = "blue4", binwidth = 1000)+
scale_x_continuous(breaks = seq(0,80000, by =2000))
skewness(small$Price,na.rm = TRUE)
kurtosis(small$Price, na.rm = TRUE)
All <- subset(All, Price < 20000)
ggplot( data = All, aes(x=All$Price)) +
geom_histogram(fill = "blue4", binwidth = 1000)+
scale_x_continuous(breaks = seq(0,80000, by =2000))
skewness(All$Price,na.rm = TRUE)
kurtosis(All$Price, na.rm = TRUE)
ggplot( data = All, aes(x=All$Price)) +
geom_histogram(fill = "blue4", binwidth = 1000)+
scale_x_continuous(breaks = seq(0,80000, by =2000), labels = "comma")
b1 <- ggplot( All, aes(x = Airline, y= Price, fill = Airline)) +
geom_boxplot()+coord_flip();b1
View(a4)
b8 <- ggplot( All, aes(x =Duration_min , y= Price)) +
geom_point(color="red4") + geom_smooth();b8
b8 <- ggplot( All, aes(y =Duration_min , x= Price)) +
geom_point(color="red4") + geom_smooth();b8
b1 <- ggplot( All, aes(x = Airline, y= Price, fill = Airline)) +
geom_boxplot()+coord_flip();b1
b2 <- ggplot( All, aes(x = Source, y= Price, fill = Source)) +
geom_boxplot()+coord_flip();b2
b3 <- ggplot( All, aes(x = Destination, y= Price, fill = Destination)) +
geom_boxplot()+coord_flip();b3
b4 <- ggplot( All, aes(x = Total_Stops, y= Price, fill = Total_Stops)) +
geom_boxplot()+coord_flip();b4
b5 <- ggplot( All, aes(x =All$day_week , y= Price, fill = day_week)) +
geom_boxplot()+coord_flip();b5
b6 <- ggplot( All, aes(x =All$Dep_Time_hour , y= Price, fill = Dep_Time_hour )) +
geom_boxplot()+coord_flip();b6
b7 <- ggplot( All, aes(x =All$Arrival_Time_hour , y= Price, fill = Arrival_Time_hour)) +
geom_boxplot()+coord_flip();b7
b8 <- ggplot( All, aes(y =Duration_min , x= Price)) +
geom_point(color="red4") + geom_smooth();b8
All %>% group_by(Source,Destination) %>% summarise(n()) %>% kable()
library(knitr)
All %>% group_by(Source,Destination) %>% summarise(n()) %>% kable()
str(All) %>% kable()
All %>% group_by(Source,Destination) %>% summarise(n())
All %>% group_by(Airline,Source,Destination) %>% summarise(n())
install.packages("gmodels")
install.packages("gmodels")
library(gmodels)
CrossTable(All$Source,All$Destination)
a <- as.data.frame(CrossTable(All$Source,All$Destination))
View(a)
a
a <- table(Source,Destination)
a <- table(All$Source,All$Destination)
a
ftable(a)
a <- table(All$Airline,All$Source,All$Destination)
ftable(a)
a <- as.data.frame(table(All$Airline,All$Source,All$Destination))
View(a)
ftable(a)
a <- as.data.frame(table(All$Airline,All$Source,All$Destination))
View(a)
chisq.test(a)
a <- table(All$Source,All$Destination)
chisq.test(a)
a <- table(All$Total_Stops,All$day_week)
a
pairs(All)
install.packages("GGally")
install.packages("GGally")
library(GGally)
ggpairs(All, columns = 1:4, aes(color = Total_Stops))
library(GGally)
ggpairs(All, columns = 1:3, aes(color = Total_Stops))
All$Price <- normalizeFeatures(All$Price ,method ="standardize")
Price_nor <- normalizeFeatures(All$Price ,method = "standardize")
Price_nor <- normalizeFeatures(All$Price ,method = "standardize", na.rm = TRUE)
Price_nor <- normalizeFeatures(All$Price ,method = "standardize")
sum(is.na(All$Price))
