suppressPackageStartupMessages(library(ggcorrplot))
suppressPackageStartupMessages(library(dplyr))
library(splitstackshape)
library(gridExtra)
library(Matrix)
library(tidyverse)
dataset = data.frame(anime[c(-2)])
sum( is.na( dataset)) #[count no. of missing values]
dataset = na.omit(dataset)
library(readr)
anime <- read_csv("C:/LOCAL_R/Rishabh##/Machine Learning/data SET/anime-recommendations-database/anime.csv",
col_types = cols(anime_id = col_number(),
episodes = col_number(), members = col_number(),
rating = col_number(), type = col_factor(levels = c())))
View(anime)
#*****************************************************************
suppressPackageStartupMessages(library(plotly))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(data.table))
suppressPackageStartupMessages(library(ggcorrplot))
suppressPackageStartupMessages(library(dplyr))
library(splitstackshape)
library(gridExtra)
library(Matrix)
library(tidyverse)
dataset = data.frame(anime[c(-2)])
sum( is.na( dataset)) #[count no. of missing values]
dataset = na.omit(dataset)
glimpse(dataset)
# Visualize the relationship between the Episodes and Rating
gs <- ggplot( dataset ,aes(y = log(dataset$episodes) ,x = dataset$rating,color =rating, fill = rating)) # SETUP
gl <- gs + geom_count()+geom_smooth() # Adding Scatterplot
glb <- gl + labs(title ='ANIME ', y='LOGARITHM OF EPISODES', x='RATING');glb # Labeling
# Correlation
ggcorrplot(cor(dataset[c(-2,-3)]),method = 'circle',hc.order = T,
type ='lower',colors = c('darkred','grey','cyan'),title = "CORRELATION MATRIX") #plotting
# *****ANIME TYPE  ANALYSIS*****
# Visualize the relationship between the Type and Episode
gs <- ggplot( dataset ,aes(x = dataset$type ,y = log(dataset$episodes),color =type, fill = type)) # SETUP
gl <- gs + geom_bar(stat = "identity") # Adding Barplot
glb <- gl + labs(title ='ANIME ', x='TYPE', y='LOGARITHM OF EPISODES');glb # Labeling
install.packages(c("arules", "assertive.code", "assertive.data", "assertive.data.uk", "assertive.data.us", "assertive.matrices", "assertive.models", "broom", "car", "carData", "chron", "cli", "data.table", "digest", "doParallel", "dplyr", "evaluate", "fansi", "gbm", "ggcorrplot", "ggplot2", "googleVis", "haven", "htmlwidgets", "jomo", "jsonlite", "later", "lme4", "maptools", "markdown", "mime", "nloptr", "NLP", "openssl", "plotrix", "processx", "ps", "R6", "raster", "Rcpp", "RcppEigen", "readr", "reprex", "rio", "rlang", "rmarkdown", "rpart.plot", "rstudioapi", "shiny", "stringi", "testthat", "tidyr", "tidyselect", "tinytex", "TTR", "webshot", "xfun", "xtable", "xts", "zoo"))
install.packages(c("foreign", "lattice", "MASS", "Matrix", "mgcv", "survival"), lib="C:/Program Files/R/R-3.5.1/library")
install.packages(c("jsonlite", "markdown"))
# suppressPackageStartupMessages(library(PACKAGE))
# To supress package messages
if(!"ggplot2" %in% rownames(installed.packages())){install.packages("ggplot2")}
suppressPackageStartupMessages(library(ggplot2))
if(!"plotly" %in% rownames(installed.packages())){install.packages("plotly")}
suppressPackageStartupMessages(library(plotly))
if(!"dplyr" %in% rownames(installed.packages())){install.packages("dplyr")}
suppressPackageStartupMessages(library(dplyr))
if(!"plotly" %in% rownames(installed.packages())){install.packages("plotly")}
suppressPackageStartupMessages(library(MASS))
if(!"MASS" %in% rownames(installed.packages())){install.packages("MASS")}
if(!"ggcorrplot" %in% rownames(installed.packages())){install.packages("ggcorrplot")}
suppressPackageStartupMessages(library(ggcorrplot))
scatter.smooth(x =Boston$lstat, y = Boston$medv ,col ='steel blue'
,pch = 20)
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(MASS)
scatter.smooth(x =Boston$lstat, y = Boston$medv ,col ='steel blue'
,pch = 20)
scatter.smooth(x =Boston$lstat, y = Boston$medv ,col ='steel blue'
a -> c(12,2,33,3)
a <- c(12,2,33,3)
is.vector(a)
as.data.frame.list(a)
a
a[2]
length(a)
library(readr)
anime <- read_csv("C:/LOCAL_R/Rishabh##/Machine Learning/data SET/anime-recommendations-database/anime.csv",
col_types = cols(anime_id = col_integer(),
episodes = col_integer(), members = col_integer(),
rating = col_double(), type = col_factor(levels = c())))
View(anime)
knitr::opts_chunk$set(echo = TRUE)
dataset = data.frame(anime[c(-2)])
sum( is.na( dataset))
dataset = na.omit(dataset)
suppressPackageStartupMessages(library(plotly))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(data.table))
suppressPackageStartupMessages(library(ggcorrplot))
suppressPackageStartupMessages(library(dplyr))
library(splitstackshape)
library(gridExtra)
library(Matrix)
library(tidyverse)
dataset = data.frame(anime[c(-2)])
sum( is.na( dataset)) #[count no. of missing values]
dataset = na.omit(dataset)
glimpse(dataset)
gs <- ggplot( dataset ,aes(y = log(dataset$episodes) ,x = dataset$rating,color =rating, fill = rating)) # SETUP
gl <- gs + geom_count()+geom_smooth() # Adding Scatterplot
glb <- gl + labs(title ='ANIME ', y='LOGARITHM OF EPISODES', x='RATING');glb # Labeling
ggcorrplot(cor(dataset[c(-2,-3)]),method = 'circle',hc.order = T,
type ='lower',colors = c('darkred','grey','cyan'),title = "CORRELATION MATRIX") #plotting
gs <- ggplot( dataset ,aes(x = dataset$type ,y = log(dataset$episodes),color =type, fill = type)) # SETUP
gl <- gs + geom_bar(stat = "identity") # Adding Barplot
glb <- gl + labs(title ='ANIME ', x='TYPE', y='LOGARITHM OF EPISODES');glb # Labeling
library(tidyverse)
ggplot( data = mpg ) +
geom_point( mapping = aes(x = displ, y = hwy, size = class))
ggplot( data = mpg ) +
geom_point( mapping = aes(x = displ, y = hwy, alpha = class))
ggplot( data = mpg ) +
geom_point( mapping = aes(x = displ, y = hwy, shape = class))
ggplot( data = mpg ) +
geom_point( mapping = aes(x = displ, y = hwy), color = class)
ggplot( data = mpg ) +
geom_point( mapping = aes(x = displ, y = hwy), color = "blue")
ggplot( data = mpg ) +
geom_point( mapping = aes(x = displ, y = hwy), color = "pink")
ggplot( data = mpg ) +
geom_point( mapping = aes(x = displ, y = hwy), color = "blue4")
ggplot2 :: mpg
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,stroke = class)) +
geom_smooth( mapping = aes( x = displ, y = hwy ))
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = displ)) +
geom_smooth( mapping = aes( x = displ, y = hwy ))
# ploting displ[engine size] vs hwy[ fuel efficiency]
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = displ < 5)) +
geom_smooth( mapping = aes( x = displ, y = hwy ))
# ploting displ[engine size] vs hwy[ fuel efficiency]
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = displ < 6)) +
geom_smooth( mapping = aes( x = displ, y = hwy ))
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = class)) +
geom_smooth( mapping = aes( x = displ, y = hwy ))
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = displ < 6)) +
geom_smooth( mapping = aes( x = displ, y = hwy ))
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = displ < 6), size = 4) +
geom_smooth( mapping = aes( x = displ, y = hwy ))
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = displ < 6), size = 3) +
geom_smooth( mapping = aes( x = displ, y = hwy ))
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = class), size = 3) +
geom_smooth( mapping = aes( x = displ, y = hwy ))
# ploting displ[engine size] vs hwy[ fuel efficiency]
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = displ < 6 && hwy < 30), size = 3) +
geom_smooth( mapping = aes( x = displ, y = hwy ))
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = displ < 6 || hwy < 30), size = 3) +
geom_smooth( mapping = aes( x = displ, y = hwy ))
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = displ < 6 || hwy > 30), size = 3) +
geom_smooth( mapping = aes( x = displ, y = hwy ))
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = displ < 6 && hwy > 30), size = 3) +
geom_smooth( mapping = aes( x = displ, y = hwy ))
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = displ < 6 ), size = 3) +
geom_smooth( mapping = aes( x = displ, y = hwy ))
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = f1 ), size = 3) +
geom_smooth( mapping = aes( x = displ, y = hwy ))
# ploting displ[engine size] vs hwy[ fuel efficiency]
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = fl ), size = 3) +
geom_smooth( mapping = aes( x = displ, y = hwy ))
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = drv ), size = 3) +
geom_smooth( mapping = aes( x = displ, y = hwy ))
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color =  ), size = 3) +
facet_wrap( ~ class, nrow = 2 )
geom_smooth( mapping = aes( x = displ, y = hwy ))
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = className() ), size = 3) +
facet_wrap( ~ class, nrow = 2 )
geom_smooth( mapping = aes( x = displ, y = hwy ))
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = className() ), size = 3) +
facet_wrap( ~ class, nrow = 2 )
geom_smooth( mapping = aes( x = displ, y = hwy ))
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = class ), size = 3) +
facet_wrap( ~ class, nrow = 2 )
geom_smooth( mapping = aes( x = displ, y = hwy ))
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = class ), size = 2) +
facet_wrap( ~ class, nrow = 2 )
geom_smooth( mapping = aes( x = displ, y = hwy ))
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = class ), size = 2) +
facet_wrap( ~ class, nrow = 3 )
geom_smooth( mapping = aes( x = displ, y = hwy ))
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = class ), size = 2) +
facet_wrap( ~ class, nrow = 4 )
geom_smooth( mapping = aes( x = displ, y = hwy ))
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = class ), size = 2) +
facet_wrap( ~ class, nrow = 2 )
geom_smooth( mapping = aes( x = displ, y = hwy ))
ggplot( data = mpg) +
geom_point( mapping = aes( y = displ, x = hwy,color = class ), size = 2) +
facet_wrap( ~ class, nrow = 2 )
geom_smooth( mapping = aes( x = displ, y = hwy ))
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = class ), size = 2) +
facet_wrap( ~ class, nrow = 2 )
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = class ), size = 2) +
facet_grid( ~ class, nrow = 2 )
geom_smooth( mapping = aes( x = displ, y = hwy ))
ggplot( data = mpg) +
geom_point( mapping = aes( x = drv, y = cyl,color = class ), size = 2) +
ggplot( data = mpg) +
geom_point( mapping = aes( x = drv, y = cyl,color = class ), size = 2)
ggplot( data = mpg) +
geom_point( mapping = aes( x = drv, y = cyl,color = class ), size = 2)
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = class ), size = 2) +
facet_grid( ~ class, nrow = 2, margin = TRUE )
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = class ), size = 2) +
facet_grid( ~ class, margin = TRUE )
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = class ), size = 2) +
facet_grid( ~ class, margin = "am" )
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = class ), size = 2) +
facet_grid( ~ class, margin = "vs" )
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = class ), size = 2) +
facet_grid( ~ class, nrow = 2, margin = "am" )
ggplot( data = mpg) +
geom_point( mapping = aes( x = displ, y = hwy,color = class ), size = 2) +
geom_smooth( mapping = aes( x = displ, y = hwy ), se = FALSE)
library(tidyverse)
ggplot( data = diamonds) +
stats_summary(
mapping = aes( x=cut, y=depth ),
fun.ymin = min,
fun.ymax = max,
fun.y = median
)
ggplot( data = diamonds) +
stat_summary(
mapping = aes( x=cut, y=depth ),
fun.ymin = min,
fun.ymax = max,
fun.y = median
)
ggplot( data = diamonds, color = "blue4") +
stat_summary(
mapping = aes( x=cut, y=depth ),
fun.ymin = min,
fun.ymax = max,
fun.y = median
)
library(tidyverse)
ggplot( data = diamonds, color = "blue4") +
geom_col( mapping = aes( x=cut, y=depth)
q
ggplot( data = diamonds, color = "blue4") +
geom_col( mapping = aes( x=cut, y=depth)
)
ggplot( data = diamonds, color = "blue4") +
geom_bar( mapping = aes( x=cut, y=depth)
q
ggplot( data = diamonds, color = "blue4") +
geom_bar( mapping = aes( x=cut, y=depth))
ggplot( data = diamonds, color = "blue4") +
geom_bar( mapping = aes( x=cut, y=depth), stat = "identity")
ggplot( data = diamonds, color = "blue4") +
geom_bar( mapping = aes( x=cut, color = cut))
ggplot( data = diamonds, color = "blue4") +
geom_bar( mapping = aes( x=cut, fill = cut))
ggplot( data = diamonds, color = "blue4") +
geom_bar( mapping = aes( x=cut, fill = clarity))
ggplot( data = diamonds,mapping = aes( x=cut, fill = clarity)) +
geom_bar( alpha = 1/5, position = "identity")
ggplot( data = diamonds,mapping = aes( x=cut, fill = NA)) +
geom_bar( alpha = 1/5, position = "identity")
ggplot( data = diamonds,mapping = aes( x=cut, color = "clarity")) +
geom_bar( fill = NA, position = "identity")
ggplot( data = diamonds,mapping = aes( x=cut, color = "clarity")) +
geom_bar( position = "identity")
ggplot( data = diamonds,mapping = aes( x=cut, color = "clarity")) +
geom_bar( position = "fill")
ggplot( data = diamonds,mapping = aes( x=cut, color = "clarity")) +
geom_bar( position = "dodge")
ggplot( data = diamonds, mapping = aes( x=cut, fill = clarity )) +
geom_bar( position = "dodge")
library(tidyverse)
# Importing dataset
View(nycflights13)
ggplot( data = diamonds ) +
geom_bin2d( mapping = aes( x = carat, y= price ))
ggplot( data = diamonds ) +
geom_bin2d( mapping = aes( x = carat, y= price ))
vignette("tibble")
tibble( ~x,~y,~z
#________
'a',2,2
'b',3,3
)
tibble( ~x,~y,~z
#________
'a',2,2
'b',3,3?)
tibble( ~x,~y,~z
#________
'a',2,2
'b',3,3)
tibble( ~x,~y,~z
#________
'a',2,2
'b',3,3)
tibble( ~x,~y,~z,
#________
'a',2,2,
'b',3,3)
tibble( ~x,~y,~z,
#________
'a',2,2,
'b',3,3
)
tibble( ~x,~y,~z,
#________
'a',2,2,
'b',3,3
)
tribble( ~x,~y,~z,
#________
'a',2,2,
'b',3,3
)
tribble( ~x,~y,~z,
#________
'a',2,2,
'b',3,3
)
tribble( ~x,~y,~z,
#________
'a',1:10,2,
'b',3,3
)
tribble( ~x,~y,~z,
#________
'a',1:10,2,
'b',3,3
)
load("C:/Users/RISHABH/Desktop/BIG MArt/.RData")
install.packages(c("backports", "callr", "class", "htmlTable", "httpuv", "httr", "jsonlite", "knitr", "markdown", "pillar", "ps", "quantreg", "readr", "readxl", "slam", "tibble", "tm"))
install.packages(c("class", "codetools"), lib="C:/Program Files/R/R-3.5.1/library")
install.packages(c("backports", "callr", "class", "htmlTable", "httpuv", "httr", "jsonlite", "knitr", "markdown", "pillar", "ps", "quantreg", "readr", "readxl", "slam", "tibble", "tm"))
install.packages(c("backports", "callr", "class", "htmlTable", "httpuv", "httr", "jsonlite", "knitr", "markdown", "pillar", "ps", "quantreg", "readr", "readxl", "slam", "tibble", "tm"))
install.packages(c("backports", "callr", "class", "htmlTable", "httpuv", "httr", "jsonlite", "knitr", "markdown", "pillar", "ps", "quantreg", "readr", "readxl", "slam", "tibble", "tm"))
install.packages(c("backports", "callr", "class", "htmlTable", "httpuv", "httr", "jsonlite", "knitr", "markdown", "pillar", "ps", "quantreg", "readr", "readxl", "slam", "tibble", "tm"))
install.packages("parallelMap")
1+1+1+1+1+
3
sum(4+4+4+4+6)
sum(1,1,1,1)
prod(1,2,3)
apple = 89
is.integer(2)
is.integer(2L)
knitr::opts_chunk$set(echo = FALSE)
summary(cars)
plot(pressure)
e
Inf
data <- list(x = 1:5, y = 6:10, z = 11:15)
lapply(data, FUN = median)
data$x
movies <- c("SPYDERMAN","BATMAN","VERTIGO","CHINATOWN")
movies_lower <-lapply(movies, tolower)
movies_lower
mapply(rep, 1:4, 4:1)
mapply(sum, 1:5,1:5)
mapply(sum, 1:5,1:6)
mapply(sum, 1:5, 1:10,1:20)
mapply(rep, times = 1:4, x = 4:1)
mapply(sum, 1:5, 1:10)
mapply(sum, 1:5, 1:15)
mapply(sum, times = 1:5, x = 1:15)
setwd("~/GitHub/Mini/Flight Price Prediction")
load("~/GitHub/Mini/Flight Price Prediction/data.RData")
View(Test)
View(Train)
source('~/GitHub/Mini/Flight Price Prediction/flight.R', echo=TRUE)
summary(Train)
a1 <- ggplot( Train ,aes(fct_infreq(Train$Airline))) + geom_bar(, fill ='red4') + coord_flip()
a2 <- ggplot( Train ,aes(fct_infreq(Train$Source))) + geom_bar(, fill ='blue4') + coord_flip()
a3 <- ggplot( Train ,aes(fct_infreq(Train$Destination))) + geom_bar(, fill ='orange4') + coord_flip()
a4 <- ggplot( Train ,aes(fct_infreq(Train$Total_Stops))) + geom_bar(, fill ='deeppink4') + coord_flip()
grid.arrange( a1,a2,a3,a4, nrow = 2)
b1 <- ggplot( Train, aes(x = Airline, y= Price, fill = Airline)) +
geom_bar( stat = "summary", fun.y = 'mean') +
coord_flip();b1
b1 <- ggplot( Train, aes(x = Airline, y= fct_infreq(Price), fill = Airline)) +
geom_bar( stat = "summary", fun.y = 'mean') +
coord_flip();b1
b1 <- ggplot( Train, aes(x = fct_infreq(Airline), y= Price, fill = Airline)) +
geom_bar( stat = "summary", fun.y = 'mean') +
coord_flip();b1
b4 <- ggplot( Train, aes(x = Total_Stops, y= Price, fill = Total_Stops)) +
geom_bar( stat = "summary", fun.y = 'mean') +
coord_flip();b4
b5 <- ggplot( Train, aes(x =Train$day_week , y= Price, fill = day_week)) +
geom_bar( stat = "summary", fun.y = 'mean') +
coord_flip();b5
b6 <- ggplot( Train, aes(x =Train$Dep_Time_hour , y= Price, fill = Dep_Time_hour )) +
geom_bar( stat = "summary", fun.y = 'mean') +
coord_flip();b6
b6 <- ggplot( Train, aes(x =Train$Dep_Time_hour , y= Price, fill = Dep_Time_hour )) +
geom_bar( stat = "summary", fun.y = 'mean',decreasing = TRUE) +
coord_flip();b6
b6 <- ggplot( Train, aes(x =Train$Dep_Time_hour , y= Price, fill = Dep_Time_hour ),,decreasing = TRUE) +
geom_bar( stat = "summary", fun.y = 'mean') +
coord_flip();b6
b6 <- ggplot( Train, aes(x =Train$Dep_Time_hour , y= Price, fill = Dep_Time_hour ),decreasing = TRUE) +
geom_bar( stat = "summary", fun.y = 'mean') +
coord_flip();b6
b6 <- ggplot( Train, aes(x =Train$Dep_Time_hour , y= Price, fill = Dep_Time_hour )) +
geom_bar( stat = "summary", fun.y = 'mean') +
coord_flip();b6
ml_task <- makeRegrTask(data = train_set,target = 'Price')
# Making a learner
# Regression RandomForest model
rf.lrn <- makeLearner("regr.randomForest",par.vals = list(importance = TRUE))
# To get the list of parameters for any algorithm
# getParamSet("regr.randomForest")
# Define Hyperparameters of model
model_Params <- makeParamSet(
makeIntegerParam("ntree",lower = 500, upper = 1500),
makeIntegerParam("mtry",lower = 2, upper = 12),
makeIntegerParam("maxnodes",lower = 20, upper = 50)
)
random_tune <- makeTuneControlRandom(maxit = 10L)
cv_folds <- makeResampleDesc("CV", iters = 3) # 3 fold cross validation
tuned_model <- tuneParams(learner = rf.lrn,
task = ml_task,
resampling = cv_folds,
measures = mlr::rmse,
par.set = model_Params,
control = random_tune,
show.info = FALSE
)
model <- setHyperPars(learner = rf.lrn,
par.vals = tuned_model$x)
# Verify performance on cross validation folds of tuned model
# resample(model,ml_task,cv_folds,measures = list(rsq,mlr::rmse))
rf <- train(learner = rf.lrn,task = ml_task)
rf_pred <- predict(rf,newdata = valid_set)
performance(rf_pred,measures = mlr::rmsle)
tuned_model
Price <- predict(rf,newdata = Test)
submission_file = data.frame(col1 = Price)
colnames( submission_file) <- c('Price')
write.csv(submission_file, file = "C:\\Users\\RISHABH\\Desktop\\sub_file.csv", row.names = FALSE)
Price <- predict(rf,newdata = Test)
lrns = listLearners()
View(lrns)
lrns = listLearners('regr')
install.packages("dummies")
dummy(Train)
dummies::dummy(Train)
dummies::dummy.data.frame(Train,sep ='.')
sum(is.na(Train))
Train = na.omit(Train)
dummies::dummy.data.frame(Train,sep ='.')
colnames(Train)
Train
colnames(Train)
dummies::dummy.data.frame(Train,names = c("Airline","Source","Destination","Total_Stops",
"day_week","Dep_Time_hour","Arrival_Time_hour" ),sep ='.')
Train = dummies::dummy.data.frame(Train,names = c("Airline","Source","Destination","Total_Stops",
"day_week","Dep_Time_hour","Arrival_Time_hour" ),sep ='.')
class(Train)
Train.new = dummies::dummy.data.frame(Train,sep ='.')
Train = na.omit(Train)
dummyVars(
)]
Train.new = dummies::dummy.data.frame(Train,sep ='.')
Train.new = dummies::dummy.data.frame(Train,sep ='.', fun=as.logical)
Train.new = dummies::dummy.data.frame(Train,sep ='.',all = F)
sum(is.na(Train))
as.data.frame(Train)
Train = as.data.frame(Train)
library(dummies)
Train.new = dummies::dummy.data.frame(Train,sep ='.',all = F)
View(Train.new)
Train.new = dummies::dummy.data.frame(Train,sep ='.')
View(Train.new)
Train.new = dummies::dummy.data.frame(Train.new,names = 'day_week',sep ='.')
library(Boruta)
boruta.train <- Boruta(Price ~ ., data = Train.new, doTrace = 2)
final.boruta <- TentativeRoughFix(boruta.train)
getSelectedAttributes(final.boruta, withTentative = F)
boruta.df <- attStats(final.boruta)
View(boruta.df)
save.image("~/GitHub/Mini/Flight Price Prediction/data.RData")
boruta.df$decision == "Rejected"
class(boruta.df)
rejected_col <- boruta.df %>% select(boruta.df$decision == "Rejected")
rejected_col <- boruta.df %>% select(boruta.df$decision = "Rejected")
