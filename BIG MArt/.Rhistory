sum(is.na(All[,-c(11)]))
# Since no item product can have zero visibility
ggplot(All, aes(Item_Visibility)) +
geom_histogram( fill = "steelblue4", bins = 100)+
scale_x_continuous(breaks = seq(0,0.5, by =0.05)) + ggtitle("Before Replacing")
## Replace 0 in Item_Visibility by Mean
# Count no of zeros
All %>% filter( Item_Visibility == 0.0 ) %>% count(n())
# Replace with mean
All = All %>% mutate(Item_Visibility = replace(Item_Visibility,
which( Item_Visibility == 0.0),
mean(Train$Item_Visibility)))
ggplot(All, aes(Item_Visibility)) +
geom_histogram( fill = "steelblue4", , bins = 100)+
scale_x_continuous(breaks = seq(0,0.5, by =0.05))+ ggtitle("After Replacing")
# Get unique years
sort(unique(All$Outlet_Establishment_Year))
## Replace year with corresponding number
All$Outlet_Establishment_Year[All$Outlet_Establishment_Year == 1985]<- 2018-1985
All$Outlet_Establishment_Year[All$Outlet_Establishment_Year == 1987]<- 2018-1987
All$Outlet_Establishment_Year[All$Outlet_Establishment_Year == 1997]<- 2018-1997
All$Outlet_Establishment_Year[All$Outlet_Establishment_Year == 1998]<- 2018-1998
All$Outlet_Establishment_Year[All$Outlet_Establishment_Year == 1999]<- 2018-1999
All$Outlet_Establishment_Year[All$Outlet_Establishment_Year == 2002]<- 2018-2002
All$Outlet_Establishment_Year[All$Outlet_Establishment_Year == 2004]<- 2018-2004
All$Outlet_Establishment_Year[All$Outlet_Establishment_Year == 2007]<- 2018-2007
All$Outlet_Establishment_Year[All$Outlet_Establishment_Year == 2009]<- 2018-2009
ggplot(All, aes(Item_MRP)) +
geom_histogram( fill = "purple4", na.rm = TRUE,binwidth = 1)+
scale_x_continuous(breaks = seq(0,300, by =10))
# Gap 1
All %>% select(Item_MRP) %>% filter(Item_MRP >68 & Item_MRP < 71 )
# Gap 2
All %>% select(Item_MRP) %>% filter(Item_MRP >135 & Item_MRP < 137 )
# Gap 3
All %>% select(Item_MRP) %>% filter(Item_MRP >202 & Item_MRP < 204 )
# Creating new Column
All = All %>% mutate(Item_MRP_cluster = ifelse(Item_MRP < 69, "1st",      ifelse(Item_MRP >= 69 & Item_MRP < 136, "2nd",                              ifelse(Item_MRP >= 136 & Item_MRP < 203, "3rd", "4th"))))
# Converting into factors
All$Item_MRP_cluster<-as.factor(All$Item_MRP_cluster)
# Ploting
ggplot(All,aes(Item_MRP_cluster, fill = Item_MRP_cluster)) +
geom_bar()
library(stringr)
All = All %>% mutate( Item_Category = str_sub(Item_Identifier,start = 1, end =2 ))
# Replacing Values
All$Item_Category[All$Item_Category == "DR"] <- "Drinks"
All$Item_Category[All$Item_Category == "FD"] <- "Foods"
All$Item_Category[All$Item_Category == "NC"] <- "Non Consumable"
# Converting into Factors
All$Item_Category <- as.factor(All$Item_Category)
levels(All$Item_Category)
# Ploting
ggplot(All,aes(Item_Category, fill = Item_Category)) +
geom_bar()
# Ploting
ggplot(All,aes(as.factor(Outlet_Identifier), fill = Outlet_Identifier)) +
geom_bar() + xlab("Outlet Identifier") + ggtitle("Old Plot")
# Creating new Column
All$Outlet_Type_New <- as.factor(All$Outlet_Identifier)
# Renaming Levels
levels(All$Outlet_Type_New) <- c("OutLet 1","OutLet 2","OutLet 3","OutLet 4","OutLet 5","OutLet 6","OutLet 7","OutLet 8","OutLet 9","OutLet 10")
# Drop Outlet Identifier
All <- All[,-c(7)]
# new Ploting
ggplot(All,aes(as.factor(Outlet_Type_New), fill = Outlet_Type_New)) + geom_bar() + xlab("Outlet Type NEW") + ggtitle("New Plot")
All = All %>% mutate( Item_MRP_per_unit_Weight = All$Item_MRP/All$Item_Weight)
# Ploting
ggplot(All, aes(Item_MRP_per_unit_Weight,Item_Outlet_Sales))+
geom_point(colour = 'darkorchid4',alpha=0.3)
# Creating Table
kable(table(All$Item_Type,All$Item_Category), caption = "Tabel 1")
kable(table(All$Item_Type,All$Item_Fat_Content), caption = "Tabel 2")
perishable = c("Breads", "Breakfast", "Dairy", "Fruits and Vegetables", "Meat", "Seafood")
non_perishable = c("Baking Goods", "Canned", "Frozen Foods", "Hard Drinks", "Health and Hygiene", "Household", "Soft Drinks")
# create a new feature 'Item_Type_new'
All <- All %>% mutate(Item_Type_New = ifelse(Item_Type %in% perishable, "perishable", ifelse(Item_Type %in% non_perishable, "non_perishable", "not_sure")))
All$Item_Type_New <- as.factor(All$Item_Type_New)
# Dropping Item Type
All <- All[,-c(5)]
#str(All )
All$Outlet_Location_Type <- as.factor(All$Outlet_Location_Type)
All$Outlet_Type <- as.factor(All$Outlet_Type)
library(moments)
cat("Skewness of Item_Weight is :",skewness(All$Item_Weight),
"Skewness of Item_Visibility is :",skewness(All$Item_Visibility),
"Skewness of Item_MRP is :",skewness(All$Item_MRP),
"Skewness of Item_MRP_per_unit_Weight is :",skewness(All$Item_MRP_per_unit_Weight),fill =2)
All$Item_Visibility <- All$Item_Visibility^(1/3)
All$Item_Weight <- sqrt(All$Item_Weight)
All$Item_MRP_per_unit_Weight <- All$Item_MRP_per_unit_Weight^(1/3)
# Other than numeric Variables
set_2 <- All[,-c(2,4,6,14)]
# standardizing the Variables
set_1 <- normalizeFeatures(All[,c(2,4,6,14)],method = "standardize")
# Combining Sets
All_trans <- bind_cols( set_1, set_2)
# Creating Dummy Variable using MLR Pakage
All_trans <- createDummyFeatures(All_trans)
train <- All_trans[1:nrow(Train),]
test <- All_trans[(nrow(Train)+1):nrow(All_trans),]
# Removing Item_Outlet_Sales from test set
test <- test[, -c(8)]
# Making Correlation Matrix
library(corrplot)
cor_train = cor(train[,-c(5,6)])
View(train)
cor_train = cor(train[,-c(4)])
# Making Correlation Matrix
library(corrplot)
cor_train = cor(train[,-c(4)])
corrplot(cor_train, method = "pie", type = "lower", tl.cex = 0.9)
library(caTools)
set.seed(123)
split = sample.split(train$Item_Outlet_Sales, SplitRatio = 0.8)
train_set = subset(train[,-c(1)] , split==TRUE )
valid_set = subset(train[,-c(1)]  , split==FALSE )
lr = lm( Item_Outlet_Sales~.,data = train_set)
summary(lr)
summary(lr)$Pr
summary(lr)
View(cor_train)
crr <- as.data.frame(cor_train)
View(crr)
cor_train <- as.data.frame(cor_train)
rownames(cor_train)
cor_train %>% mutate( var_names = row.names(cor_train))
cor_train %>% select(var_names, Item_Outlet_Sales) %>% filter(Item_Outlet_Sales >0.2 & Item_Outlet_Sales < -0.2 )
cor_train <- cor_train %>% mutate( var_names = row.names(cor_train))
cor_train %>% select(var_names, Item_Outlet_Sales) %>% filter(Item_Outlet_Sales >0.2 & Item_Outlet_Sales < -0.2 )
cor_train %>% select(var_names, Item_Outlet_Sales) %>% filter(Item_Outlet_Sales >0.1 | Item_Outlet_Sales < -0.1 )
cor_train %>% select(var_names, Item_Outlet_Sales) %>% filter(Item_Outlet_Sales >0.2 | Item_Outlet_Sales < -0.2 )
kable(cor_train %>% select(var_names, Item_Outlet_Sales) %>% filter(Item_Outlet_Sales >0.2 | Item_Outlet_Sales < -0.2 ))
# Making Correlation Matrix
library(corrplot)
cor_train = cor(train[,-c(4)])
corrplot(cor_train, method = "shade", type = "lower", tl.cex = 0.9)
# Making Correlation Matrix
library(corrplot)
cor_train = cor(train[,-c(4)])
corrplot(cor_train, method = "number", type = "lower", tl.cex = 0.9)
# Making Correlation Matrix
library(corrplot)
cor_train = cor(train[,-c(4)])
corrplot(cor_train, method = "number", type = "lower", tl.cex = 0.9, order = "AOE")
# Making Correlation Matrix
library(corrplot)
cor_train = cor(train[,-c(4)])
corrplot(cor_train, method = "number", type = "lower", tl.cex = 0.9, order = "AOE", diag = F)
# Making Correlation Matrix
library(corrplot)
cor_train = cor(train[,-c(4)])
corrplot(cor_train, method = "number", type = "lower", tl.cex = 0.9, order = "kclust")
# Making Correlation Matrix
library(corrplot)
cor_train = cor(train[,-c(4)])
corrplot(cor_train, method = "number", type = "lower", tl.cex = 0.9, order = "hclust")
# Making Correlation Matrix
library(corrplot)
cor_train = cor(train[,-c(4)])
corrplot(cor_train, method = "number", type = "lower", tl.cex = 0.9, sig.level = 0.01)
# Making Correlation Matrix
library(corrplot)
cor_train = cor(train[,-c(4)])
corrplot(cor_train, method = "number", type = "lower", tl.cex = 0.9, sig.level = 0.5)
# Making Correlation Matrix
library(corrplot)
cor_train = cor(train[,-c(4)])
corrplot(cor_train, method = "cirlce", type = "lower", tl.cex = 0.9, sig.level = 0.5)
# Making Correlation Matrix
library(corrplot)
cor_train = cor(train[,-c(4)])
corrplot(cor_train, method = "circle", type = "lower", tl.cex = 0.9, sig.level = 0.5)
# Making Correlation Matrix
library(corrplot)
cor_train = cor(train[,-c(4)])
corrplot(cor_train, method = "pie", type = "lower", tl.cex = 0.9, sig.level = 0.5)
# Making Correlation Matrix
library(corrplot)
cor_train = cor(train[,-c(4)])
corrplot(cor_train, method = "pie", type = "lower", tl.cex = 0.5, sig.level = )
# Making Correlation Matrix
library(corrplot)
cor_train = cor(train[,-c(4)])
corrplot(cor_train, method = "number", type = "lower", tl.cex = 0.5, sig.level = )
# Making Correlation Matrix
library(corrplot)
cor_train = cor(train[,-c(4)])
corrplot(cor_train, method = "number", type = "lower", sig.level = )
# Making Correlation Matrix
library(corrplot)
cor_train = cor(train[,-c(4)])
corrplot(cor_train, method = "number", type = "lower")
# Making Correlation Matrix
library(corrplot)
cor_train = cor(train[,-c(4)])
corrplot(cor_train, method = "pie", type = "lower")
names(train)
cor(train$Outlet_Type_New.OutLet.4,train$Outlet_Type_New.OutLet.6)
cor(train$Outlet_Type_New.OutLet.10,train$Outlet_Location_Type.Tier.1)
cor(train$Outlet_Type_New.OutLet.10,train$Outlet_Location_Type.Tier.2)
cor(train$Outlet_Type_New.OutLet.10,train$Outlet_Location_Type.Tier.3)
cor(train$Outlet_Type_New.OutLet.10,train$Outlet_Location_Type.Tier.1)
cor(train$Outlet_Type_New.OutLet.5,train$Outlet_Type.Grocery.Store)
cor(train$Outlet_Type_New.OutLet.1,train$Outlet_Type.Grocery.Store)
cor(train$Item_Category.Non.Consumable,train$Item_Category.Foods)
cor(train$Item_MRP_cluster.4th,train$Item_MRP_cluster.1st)
cor(train$Item_MRP_cluster.4th,train$Item_MRP_cluster.2nd)
cor(train$Item_MRP_cluster.4th,train$Item_MRP)
kable(cor_train %>% select(var_names, Item_Outlet_Sales) %>% filter(Item_Outlet_Sales >0.2 | Item_Outlet_Sales < -0.2 ))
cor_train <- as.data.frame(cor_train)
# making new columns from row names
cor_train <- cor_train %>% mutate( var_names = row.names(cor_train))
# filter having high correlation with Item Outlet Sales
kable(cor_train %>% select(var_names, Item_Outlet_Sales) %>% filter(Item_Outlet_Sales >0.2 | Item_Outlet_Sales < -0.2 ))
kable(cor_train %>% select(var_names, Item_Outlet_Sales) %>% filter(Item_Outlet_Sales >0.3 | Item_Outlet_Sales < -0.3 ))
cor(train$Item_Fat_Content.Low.Fat.4th,train$Item_Fat_Content.Regular)
cor(train$Item_Fat_Content.Low.Fat,train$Item_Fat_Content.Regular)
cor(train$Item_MRP_per_unit_Weight,train$Item_MRP)
kable(cor_train %>% select(var_names, Item_Outlet_Sales) %>% filter(Item_Outlet_Sales >0.3 | Item_Outlet_Sales < -0.3 ))
train_exp <- train[!(names(train)) %in% c('Outlet_Type_New.Outlet.4','Outlet_Type_New.Outlet.6','Outlet_Type_New.OutLet.5','Outlet_Type_New.OutLet.1','Item_Category.Non.Consumable','Item_MRP_cluster.4th','Item_Fat_Content.Low.Fat')]
# Dropping highly correlated variables from train set
test_exp <- test[!(names(test)) %in% c('Outlet_Type_New.Outlet.4','Outlet_Type_New.Outlet.6','Outlet_Type_New.OutLet.5','Outlet_Type_New.OutLet.1','Item_Category.Non.Consumable','Item_MRP_cluster.4th','Item_Fat_Content.Low.Fat')]
# Dropping highly correlated variables from train set
train <- train[!(names(train)) %in% c('Outlet_Type_New.Outlet.4','Outlet_Type_New.Outlet.6','Outlet_Type_New.OutLet.5','Outlet_Type_New.OutLet.1','Item_Category.Non.Consumable','Item_MRP_cluster.4th','Item_Fat_Content.Low.Fat')]
# Dropping highly correlated variables from train set
test <- test[!(names(test)) %in% c('Outlet_Type_New.Outlet.4','Outlet_Type_New.Outlet.6','Outlet_Type_New.OutLet.5','Outlet_Type_New.OutLet.1','Item_Category.Non.Consumable','Item_MRP_cluster.4th','Item_Fat_Content.Low.Fat')]
View(train_set)
cor_train = cor(train[,-c(3)])
cor_train = cor(test[,-c(3)])
library(corrplot)
cor_train = cor(train[,-c(4)])
corrplot(cor_train, method = "pie", type = "lower")
library(tidyverse)
library(readr)
library(gridExtra)
library(randomForest)
library(caret)
library(mlr)
library(knitr)
Train <- read_csv("Train.csv")
Test <- read_csv("Test.csv")
# Dimension of Data
dim(Train)
dim(Test)
# Structure of Data
str(Train)
str(Test)
Test$Item_Outlet_Sales = NA
All <- rbind(Train,Test)
str(All)
ggplot(Train, aes(Item_Outlet_Sales)) +
geom_histogram(binwidth = 100, fill = "cadetblue4") +
scale_x_continuous(breaks = seq(0,14000, by =1000))
p11 <-ggplot(All, aes(Item_Weight)) +
geom_histogram( fill = "springgreen4", na.rm = TRUE,binwidth = 0.5)+
scale_x_continuous(breaks = seq(0,25, by =2.5))
p12 <-ggplot(All, aes(Item_Visibility)) +
geom_histogram( fill = "darkorange4", na.rm = TRUE)+
scale_x_continuous(breaks = seq(0,0.5, by =0.05))
p13 <-ggplot(All, aes(Item_MRP)) +
geom_histogram( fill = "purple4", na.rm = TRUE,binwidth = 5)+
scale_x_continuous(breaks = seq(0,300, by =25))
p31 <- ggplot(All, aes(x= 'Item Weight',y=Item_Weight)) +
geom_boxplot(outlier.colour = "red4")
p32 <- ggplot(All, aes(x= 'Item_Visibility',y=Item_Visibility)) +
geom_boxplot(outlier.colour = "red4")
p33 <- ggplot(All, aes(x= 'Item_MRP',y=Item_MRP)) +
geom_boxplot(outlier.colour = "red4")
grid.arrange(
p11,p12,p13,p31,p32,p33,nrow = 2,
top = "Continuous Variable")
ggplot(All, aes(Item_Fat_Content,fill = Item_Fat_Content)) +
geom_bar(na.rm = TRUE) + ggtitle("Original Item Fat Content")
# Convert factor in character [Item_Fat_Content]
All$Item_Fat_Content <- as_factor(All$Item_Fat_Content)
# check levels
levels(All$Item_Fat_Content)
# replace LF,low fat with Low Fat
levels( All$Item_Fat_Content)[3:4] <- "Low Fat"
# replace ref with Regular
levels( All$Item_Fat_Content )[3] <- "Regular"
ggplot(All, aes(Item_Fat_Content,fill = Item_Fat_Content)) +
geom_bar(na.rm = TRUE) + ggtitle("Modified Item Fat Content")
ggplot(All, aes(fct_infreq(Item_Type),fill = Item_Type)) +
geom_bar( na.rm = TRUE)+ xlab("Item Type") +
coord_flip()
p21 <- ggplot(All, aes(Outlet_Type)) +
geom_bar(fill = "springgreen4", na.rm = TRUE) +
theme(axis.text.x = element_text(angle = 20, hjust = 1))
p22 <- ggplot(All, aes(Outlet_Location_Type )) +
geom_bar(fill = "purple4", na.rm = TRUE)
p23 <- ggplot(All, aes(Outlet_Size)) +
geom_bar(fill = "darkorange4", na.rm = TRUE)
p24 <- ggplot(All, aes(factor(Outlet_Establishment_Year))) +
geom_bar(fill = "darkorange4", na.rm = TRUE) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("Outlet Establishment Year")
grid.arrange(p21,p22,p23,p24, nrow = 2,
top = "Categorical variable")
Train = All[1:nrow(Train),]
# Continuous Vs Target Variable
p61 <- ggplot(Train, aes(Item_Weight,Item_Outlet_Sales))+
geom_point(colour = 'cadetblue4',alpha=0.3)
p62 <- ggplot(Train, aes(Item_Visibility,Item_Outlet_Sales))+
geom_point(colour = 'darkseagreen4',alpha=0.3)
p63 <- ggplot(Train, aes(Item_MRP,Item_Outlet_Sales))+
geom_point(colour = 'deepskyblue3',alpha=0.3)
grid.arrange(
p61,
arrangeGrob(p62,p63,ncol = 2),
nrow = 2,
top = "Continuous Vs Target Variable SCATTER PLOT")
p71 <- ggplot(All, aes(x=Item_Weight,y=Item_Outlet_Sales)) +
geom_boxplot(outlier.colour = "red4")
p72 <- ggplot(All, aes(x= Item_Visibility,y=Item_Outlet_Sales)) +
geom_boxplot(outlier.colour = "red4")
p73 <- ggplot(All, aes(x= Item_MRP,y=Item_Outlet_Sales)) +
geom_boxplot(outlier.colour = "red4")
grid.arrange(
p71,p72,p73,nrow = 2,
top = "Continuous Vs Target Variable BOX PLOT")
# Discrete Vs Target Variable
p21 <- ggplot(Train,aes(Item_Fat_Content,Item_Outlet_Sales, fill = Item_Fat_Content)) + geom_boxplot()
p23 <- ggplot(Train,aes(Outlet_Size, Item_Outlet_Sales, fill = Outlet_Size)) +
geom_boxplot()
p24 <- ggplot(Train,aes(Outlet_Location_Type, Item_Outlet_Sales, fill = Outlet_Location_Type)) +
geom_boxplot()
p25 <- ggplot(Train,aes(Outlet_Type, Item_Outlet_Sales, fill = Outlet_Type)) +
geom_boxplot()
grid.arrange(
p21,p25,p23,p24, nrow = 2,
top = "Discrete Vs Target Variable")
ggplot(Train,aes(Item_Type,Item_Outlet_Sales, fill = Item_Type)) +
geom_boxplot() + coord_flip()
# Getting missing value percentage
missing_val <- as.data.frame(sapply(All[,-c(12)], function(x) sum(is.na(x))/nrow(All[,-c(12)]) ))
# Renaming Column
colnames(missing_val) <- c("percent")
missing_val$col <-as.factor(row.names(missing_val))
missing_val <- filter( missing_val, percent > 0.0)
ggplot(missing_val, aes(y = percent,x = col, fill = col)) +
geom_bar(stat = "identity") + scale_y_continuous(breaks = seq(0,1, by =0.05)) +   ggtitle("Missing Values")
# Since there are more than 28% missing values in Outlet Size, therefore Dropping it.
All <- All[,-9]
# Replace Missing vaues in Item_Weight in mean
All = All %>% mutate_at(vars(Item_Weight),~ifelse(is.na(.x), mean(.x, na.rm = TRUE), .x))
# Total missing Values
sum(is.na(All[,-c(11)]))
# Since no item product can have zero visibility
ggplot(All, aes(Item_Visibility)) +
geom_histogram( fill = "steelblue4", bins = 100)+
scale_x_continuous(breaks = seq(0,0.5, by =0.05)) + ggtitle("Before Replacing")
## Replace 0 in Item_Visibility by Mean
# Count no of zeros
All %>% filter( Item_Visibility == 0.0 ) %>% count(n())
# Replace with mean
All = All %>% mutate(Item_Visibility = replace(Item_Visibility,
which( Item_Visibility == 0.0),
mean(Train$Item_Visibility)))
ggplot(All, aes(Item_Visibility)) +
geom_histogram( fill = "steelblue4", , bins = 100)+
scale_x_continuous(breaks = seq(0,0.5, by =0.05))+ ggtitle("After Replacing")
# Get unique years
sort(unique(All$Outlet_Establishment_Year))
## Replace year with corresponding number
All$Outlet_Establishment_Year[All$Outlet_Establishment_Year == 1985]<- 2018-1985
All$Outlet_Establishment_Year[All$Outlet_Establishment_Year == 1987]<- 2018-1987
All$Outlet_Establishment_Year[All$Outlet_Establishment_Year == 1997]<- 2018-1997
All$Outlet_Establishment_Year[All$Outlet_Establishment_Year == 1998]<- 2018-1998
All$Outlet_Establishment_Year[All$Outlet_Establishment_Year == 1999]<- 2018-1999
All$Outlet_Establishment_Year[All$Outlet_Establishment_Year == 2002]<- 2018-2002
All$Outlet_Establishment_Year[All$Outlet_Establishment_Year == 2004]<- 2018-2004
All$Outlet_Establishment_Year[All$Outlet_Establishment_Year == 2007]<- 2018-2007
All$Outlet_Establishment_Year[All$Outlet_Establishment_Year == 2009]<- 2018-2009
ggplot(All, aes(Item_MRP)) +
geom_histogram( fill = "purple4", na.rm = TRUE,binwidth = 1)+
scale_x_continuous(breaks = seq(0,300, by =10))
# Gap 1
All %>% select(Item_MRP) %>% filter(Item_MRP >68 & Item_MRP < 71 )
# Gap 2
All %>% select(Item_MRP) %>% filter(Item_MRP >135 & Item_MRP < 137 )
# Gap 3
All %>% select(Item_MRP) %>% filter(Item_MRP >202 & Item_MRP < 204 )
# Creating new Column
All = All %>% mutate(Item_MRP_cluster = ifelse(Item_MRP < 69, "1st",      ifelse(Item_MRP >= 69 & Item_MRP < 136, "2nd",                              ifelse(Item_MRP >= 136 & Item_MRP < 203, "3rd", "4th"))))
# Converting into factors
All$Item_MRP_cluster<-as.factor(All$Item_MRP_cluster)
# Ploting
ggplot(All,aes(Item_MRP_cluster, fill = Item_MRP_cluster)) +
geom_bar()
library(stringr)
All = All %>% mutate( Item_Category = str_sub(Item_Identifier,start = 1, end =2 ))
# Replacing Values
All$Item_Category[All$Item_Category == "DR"] <- "Drinks"
All$Item_Category[All$Item_Category == "FD"] <- "Foods"
All$Item_Category[All$Item_Category == "NC"] <- "Non Consumable"
# Converting into Factors
All$Item_Category <- as.factor(All$Item_Category)
levels(All$Item_Category)
# Ploting
ggplot(All,aes(Item_Category, fill = Item_Category)) +
geom_bar()
# Ploting
ggplot(All,aes(as.factor(Outlet_Identifier), fill = Outlet_Identifier)) +
geom_bar() + xlab("Outlet Identifier") + ggtitle("Old Plot")
# Creating new Column
All$Outlet_Type_New <- as.factor(All$Outlet_Identifier)
# Renaming Levels
levels(All$Outlet_Type_New) <- c("OutLet 1","OutLet 2","OutLet 3","OutLet 4","OutLet 5","OutLet 6","OutLet 7","OutLet 8","OutLet 9","OutLet 10")
# Drop Outlet Identifier
All <- All[,-c(7)]
# new Ploting
ggplot(All,aes(as.factor(Outlet_Type_New), fill = Outlet_Type_New)) + geom_bar() + xlab("Outlet Type NEW") + ggtitle("New Plot")
All = All %>% mutate( Item_MRP_per_unit_Weight = All$Item_MRP/All$Item_Weight)
# Ploting
ggplot(All, aes(Item_MRP_per_unit_Weight,Item_Outlet_Sales))+
geom_point(colour = 'darkorchid4',alpha=0.3)
# Creating Table
kable(table(All$Item_Type,All$Item_Category), caption = "Tabel 1")
kable(table(All$Item_Type,All$Item_Fat_Content), caption = "Tabel 2")
perishable = c("Breads", "Breakfast", "Dairy", "Fruits and Vegetables", "Meat", "Seafood")
non_perishable = c("Baking Goods", "Canned", "Frozen Foods", "Hard Drinks", "Health and Hygiene", "Household", "Soft Drinks")
# create a new feature 'Item_Type_new'
All <- All %>% mutate(Item_Type_New = ifelse(Item_Type %in% perishable, "perishable", ifelse(Item_Type %in% non_perishable, "non_perishable", "not_sure")))
All$Item_Type_New <- as.factor(All$Item_Type_New)
# Dropping Item Type
All <- All[,-c(5)]
#str(All )
All$Outlet_Location_Type <- as.factor(All$Outlet_Location_Type)
All$Outlet_Type <- as.factor(All$Outlet_Type)
library(moments)
cat("Skewness of Item_Weight is :",skewness(All$Item_Weight),
"Skewness of Item_Visibility is :",skewness(All$Item_Visibility),
"Skewness of Item_MRP is :",skewness(All$Item_MRP),
"Skewness of Item_MRP_per_unit_Weight is :",skewness(All$Item_MRP_per_unit_Weight),fill =2)
All$Item_Visibility <- All$Item_Visibility^(1/3)
All$Item_Weight <- sqrt(All$Item_Weight)
All$Item_MRP_per_unit_Weight <- All$Item_MRP_per_unit_Weight^(1/3)
# Other than numeric Variables
set_2 <- All[,-c(2,4,6,14)]
# standardizing the Variables
set_1 <- normalizeFeatures(All[,c(2,4,6,14)],method = "standardize")
# Combining Sets
All_trans <- bind_cols( set_1, set_2)
# Creating Dummy Variable using MLR Pakage
All_trans <- createDummyFeatures(All_trans)
train <- All_trans[1:nrow(Train),]
test <- All_trans[(nrow(Train)+1):nrow(All_trans),]
# Removing Item_Outlet_Sales from test set
test <- test[, -c(8)]
# Making Correlation Matrix
library(corrplot)
cor_train = cor(train[,-c(4)])
corrplot(cor_train, method = "pie", type = "lower")
# Converting into dataframe
cor_train <- as.data.frame(cor_train)
# making new columns from row names
cor_train <- cor_train %>% mutate( var_names = row.names(cor_train))
# filter having high correlation with Item Outlet Sales
kable(cor_train %>% select(var_names, Item_Outlet_Sales) %>% filter(Item_Outlet_Sales >0.3 | Item_Outlet_Sales < -0.3 ))
# Dropping highly correlated variables from train set
train <- train[!(names(train)) %in% c('Outlet_Type_New.Outlet.4','Outlet_Type_New.Outlet.6','Outlet_Type_New.OutLet.5','Outlet_Type_New.OutLet.1','Item_Category.Non.Consumable','Item_MRP_cluster.4th','Item_Fat_Content.Low.Fat')]
# Dropping highly correlated variables from test set
test <- test[!(names(test)) %in% c('Outlet_Type_New.Outlet.4','Outlet_Type_New.Outlet.6','Outlet_Type_New.OutLet.5','Outlet_Type_New.OutLet.1','Item_Category.Non.Consumable','Item_MRP_cluster.4th','Item_Fat_Content.Low.Fat')]
View(train)
train %>% summarise_each(sum())
train[,-c(1:7)] %>% count(wt == 1)
train[,-c(1:7)] %>% count()
train[,-c(1:7)] %>%count(funs(n == 1))
train[,-c(1:7)] %>%count(funs(n(1)))
train[,-c(1:7)] %>% count()
library(caTools)
set.seed(123)
split = sample.split(train$Item_Outlet_Sales, SplitRatio = 0.8)
train_set = subset(train[,-c(1)] , split==TRUE )
valid_set = subset(train[,-c(1)]  , split==FALSE )
# Creating a task
ml_task <- makeRegrTask(data = train_set,target = 'Item_Outlet_Sales')
View(train_set)
ml_task <- makeRegrTask(data = train_set[,-c(3)],target = 'Item_Outlet_Sales')
View(ml_task)
# Making a learner
# Regression RandomForest model
rf.lrn <- makeLearner("regr.randomForest",par.vals = list(ntree = 1000,
mtry = 10,
maxnodes = 40,
importance = TRUE))
# To get the list of parameters for any algorithm
# getParamSet("regr.randomForest")
# Define Hyperparameters of model
model_Params <- makeParamSet(
makeIntegerParam("ntree",lower = 500, upper = 1200),
makeIntegerParam("mtry",lower = 3, upper = 12),
makeIntegerParam("maxnodes",lower = 20, upper = 50)
)
# Define model tuning algorithm ~ Random tune algorithm
# Random Search on the space
random_tune <- makeTuneControlRandom(maxit = 100L)
# Create repeated cross validation folds
cv_folds <- makeResampleDesc("CV", iters = 3) # 3 fold cross validation
# Tune model to find best performing parameter settings
# using random search algorithm
tuned_model <- tuneParams(learner = rf.lrn,
task = ml_task,
resampling = cv_folds,
measures = mlr::rmse,
par.set = model_Params,
control = random_tune,
show.info = FALSE
)
save.image("~/GitHub/Mini/BIG Mart/.RData")
